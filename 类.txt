成员函数的声明必须在类的内部，但是定义可以在类的内部外部

作为接口的非成员函数，必须在类的外部定义和声明

this的目的总是指向“这个”对象，所以this是一个常量指针，不允许改变this中保存的地址

std::string isbn() const {return bookNO;}
这里的const的作用是修改隐式this的指针类型。应为默认情况下this的类型是指向类类型非常量的常量指针。那是this指向的常量类
所以要修改成指向常量类的常量指针。这样使用const的成员函数，叫常量成员函数，不能修改类内的值

构造函数的名字和类名相同。构造函数的任务就是初始化类对象的数据成员函数，无论何时只要类的对象被创建，就会
执行构造函数

Sales_data()=default;为默认构造函数
Sales_data(const std::string &s):bookNo(s){} 初始化构造函数

访问控制：
定义pblice 可以被整个程序访问
定义private 可以被类的成员函数访问

类可以允许其他类或者函数访问它的非公有成员，方法是另令其他类或者函数成文它的友元

友元的声明仅仅指定了访问的权限，而非一个普通意义上的函数声明。如果我们希望类的用户能够调用某个友元函数
，那么必须在友元声明之外在声明一次

友元不具有传递性。

友元函数必须在类的外部声明，类的成员函数调用友元函数前，友元函数必须先声明过

构造函数 为啥有时候这样 ConstRef::ConstRef(int ii){
						   i=ii;
						   ci=ii;
						   ri=ii;
							}
但是这样并不安全，当ci为const或者为引用是，应为它是通过赋值操作的并不是初始化。而引用和const必须在
被初始化
所以正确更好的操作为
ConstRef::ConstRef(int ii):i(ii),ci(ii),ri(ii){}
